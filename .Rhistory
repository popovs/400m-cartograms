ecosystem("Trachurus murphyi")
ecosystem("Anadara")
ecosystem("Lampanyctodes hectoris")
species("Maurolicus walvisensis")
dummy <- species("Trachurus murphyi")
View(dummy)
dummy <- ecology("Sphyrna makarron")
dummy <- ecology("Trachurus murphyi")
list_fields("ord")
list_fields("fam")
list_fields("gen")
list_fields("Ord")
synonyms("Trachurus murphyi")
synonyms("redfish")
dummy <- synonyms("redfish")
list_fields("Cla")
list_fields("Fam")
species_fields
dummy <- length_length("Benthosema glaciale")
dummy <- length_length("Pollachius virens")
spec <- species("Pollachius virens")
View(spec)
dummy <- ecosystem("Pollachius virens")
dummy <- ecosystem("Pollachius virens, Trachurus murphyi")
dummy <- ecosystem(c("Pollachius virens", "Trachurus murphyi")
dummy <- ecosystem(c("Pollachius virens", "Trachurus murphyi"))
dummy <- popgrowth("Pollachius virens")
popchar("Pollachius virens")
length_weight("Pollachius virens")
library("rfishbase")
fishlist <- c("Doryteuthis gahi",
"Loligo forbesii",
"Hoplostethus atlanticus",
"Alosa alosa",
"Alosa fallax",
"Alosa sapidissima",
"Clupea pallasii pallasii",
"Engraulis capensis",
"Engraulis encrasicolus",
"Engraulis japonicus",
"Engraulis mordax",
"Bregmaceros mcclellandi",
"Merluccius productus",
"Mallotus villosus",
"Osmerus mordax mordax",
"Thaleichthys pacificus",
"Champsocephalus gunnari",
"Pleuragramma antarctica",
"Sebastes entomelas")
validate_names(fishlist)
warnings()
fooditems(species_list=fishlist)
food <- fooditems(species_list=fishlist, fields = c("sciname", "Foodname"))
View(food)
View(food)
library("rfishbase")
species_list(Order="Carcharhiniformes")
species_list(Order=c("Carcharhiniformes","Heterodontiformes"))
sharks <- species_list(Order=c("Carcharhiniformes","Heterodontiformes"))
view(sharks)
sharks <- species_list(Order="Carcharhiniformes")
sharks <- append(sharks, species_list(Order="Heterodontiformes"))
sharks <- append(sharks, species_list(Order="Lamniformes"))
species_list(Order=c("Carcharhiniformes","Heterodontiformes","Lamniformes"))
sharks <- species_list(Order=c("Carcharhiniformes","Heterodontiformes","Lamniformes"))
sharks <- species_list(Class="Chondrichthyes")
species_list(Class="Chondrichthyes")
species_list(Class="Elasmobranchii")
elasmo <- species_list(Class="Elasmobranchii")
rays <- species_list(Order="Rajiformes")
setdiff(elasmo,rays)
sharks <- setdiff(elasmo,rays)
sharks <-
sharks <- append(sharks, species_list(Order="Lamniformes"))
sharks <- species_list(Order="Carcharhiniformes")
sharks <- append(sharks, species_list(Order="Heterodontiformes"))
sharks <- append(sharks, species_list(Order="Hexanchiformes"))
sharks <- append(sharks, species_list(Order="Lamniformes"))
sharks <- append(sharks, species_list(Order="Orectolobiformes"))
sharks <- append(sharks, species_list(Order="Pristiophoriformes"))
sharks <- append(sharks, species_list(Order="Squaliformes"))
sharks <- append(sharks, species_list(Order="Squatiniformes"))
species_list(Class="Elasmobranchii")
set_wd <- function() {
if (!require(rstudioapi)) {
install.packages("rstudioapi", repos = "http://cran.stat.sfu.ca/")
require(rstudioapi)
}
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
}
set_wd()
set_wd()
if (!require(ggplot2)) {
install.packages("ggplot2", repos = "http://cran.stat.sfu.ca/")
require(ggplot2)
}
if (!require(dplyr)) {
install.packages("dplyr", repos = "http://cran.stat.sfu.ca/")
require(dplyr)
}
if (!require(cartogram)) {
install.packages("cartogram", repos = "http://cran.stat.sfu.ca/")
require(cartogram)
}
fishing_data <- read.csv('FAOSAU_400m_country_gis.csv')
c1950 <- fishing_data[fishing_data$Year==1950,]
countries <- map_data("world")
set_wd <- function() {
if (!require(rstudioapi)) {
install.packages("rstudioapi", repos = "http://cran.stat.sfu.ca/")
require(rstudioapi)
}
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
print(getwd())
}
set_wd()
if (!require(ggplot2)) {
install.packages("ggplot2", repos = "http://cran.stat.sfu.ca/")
require(ggplot2)
}
if (!require(dplyr)) {
install.packages("dplyr", repos = "http://cran.stat.sfu.ca/")
require(dplyr)
}
if (!require(cartogram)) {
install.packages("cartogram", repos = "http://cran.stat.sfu.ca/")
require(cartogram)
}
fishing_data <- read.csv('FAOSAU_400m_country_gis.csv', stringsAsFactors = F)
c1950 <- fishing_data[fishing_data$Year==1950,]
world <- wrld_simpl[wrld_simpl$NAME != "Antarctica",] # World GIS SpatialPolygonsDataFrame (spdf) from base R, minus Antarctica
names(c1950) <- c("NAME", "YEAR", "CATCH") # Rename "Country" column to "NAME" so we can merge our catch data with the spdf, using the NAME column to link between the two. Capitalizing Year and Catch to make things more consistent once merged.
map1950 <- merge(world, c1950, by="NAME", all=TRUE)
map1950$CATCH[is.na(map1950$CATCH)] <- 0
map1950$CATCH[map1950$CATCH < 1] <- 1
map1950 <- merge(world, c1950, by="NAME", all=TRUE)
world <- wrld_simpl[wrld_simpl$NAME != "Antarctica",] # World GIS SpatialPolygonsDataFrame (spdf) from base R, minus Antarctica
data("wrld_simpl")
world <- wrld_simpl[wrld_simpl$NAME != "Antarctica",] # World GIS SpatialPolygonsDataFrame (spdf) from base R, minus Antarctica
library(maptools)
data("wrld_simpl")
world <- wrld_simpl[wrld_simpl$NAME != "Antarctica",] # World GIS SpatialPolygonsDataFrame (spdf) from base R, minus Antarctica
names(c1950) <- c("NAME", "YEAR", "CATCH") # Rename "Country" column to "NAME" so we can merge our catch data with the spdf, using the NAME column to link between the two. Capitalizing Year and Catch to make things more consistent once merged.
map1950 <- merge(world, c1950, by="NAME", all=TRUE)
map1950$CATCH[is.na(map1950$CATCH)] <- 0
map1950$CATCH[map1950$CATCH < 1] <- 1
carto1950 <- cartogram(map1950, "CATCH", itermax=7)
plot(carto1950)
plot(world)
system.time(carto1950 <- cartogram(map1950, "CATCH", itermax=7))
system.time(carto1950 <- cartogram(map1950, "CATCH", itermax=50))
plot(carto1950)
mapzeros <- merge(world, c1950, by="NAME", all=TRUE)
mapzeros$CATCH[is.na(mapzeros$CATCH)] <- 0
View(mapzeros)
cartozeros <- cartogram(mapzeros, "CATCH", 10)
plot(cartozeros)
plot(world)
rm(mapzeros)
rm(cartozeros)
mapsmol <- merge(world, c1950, by="NAME", all=TRUE)
mapsmol$CATCH[is.na(mapsmol$CATCH)] <- 0.1
View(mapsmol)
mapsmol$CATCH[mapsmol$CATCH == 0] <- 0.1
View(mapsmol)
cartosmol <- cartogram(mapsmol, "CATCH", itermax=7)
plot(cartosmol)
plot(world)
rm(cartosmol)
rm(mapsmol)
dir.create("Shapefiles")
if (!require(raster)) {
install.packages("raster", repos = "http://cran.stat.sfu.ca/")
require(raster)
}
set_wd()
sample <- read.csv('Data/XYZsampledata.csv')
df_full <- read.csv("XYZsampledata.csv")
xyz <- sample[,c('x','y','Catch')]
r1 <- rasterFromXYZ(xyz, crs="+proj=mill +lon_0=-150 +lat_0=0 +R=6371000 +units=m +no_defs", digits=2)
plot(r1)
library(rasterVis)
library(SDMTools)
countries <- map_data("world")
countries <- countries[countries$region!='Antarctica',1:5] # remove Antarctica, drop irrelevant columns
map_data_1950 <- merge(countries, c1950, by="Country", all=TRUE)
p1950 <- ggplot() +
# countries
geom_polygon(data = map_data_1950, aes(
fill = Catch,
x = long,
y = lat,
group = group
)
) +
# constrain proportions
coord_fixed() +
# countries outlines
geom_path(data = countries, aes(
x = long,
y = lat,
group = group),
color = "white", size = 0.01
)
map_data_1950 <- merge(countries, c1950, by="Country", all=TRUE)
countries <- map_data("world")
countries <- countries[countries$region!='Antarctica',1:5] # remove Antarctica, drop irrelevant columns
names(countries)[names(countries) == "region"] <- "Country" # rename "region" column to "Country" so we can join the two datasets
map_data_1950 <- merge(countries, c1950, by="Country", all=TRUE)
fishing_data <- read.csv('FAOSAU_400m_country_gis.csv')
c1950 <- fishing_data[fishing_data$Year==1950,]
map_data_1950 <- merge(countries, c1950, by="Country", all=TRUE)
map_data_1950 <- arrange(map_data_1950, order)
p1950 <- ggplot() +
# countries
geom_polygon(data = map_data_1950, aes(
fill = Catch,
x = long,
y = lat,
group = group
)
) +
# constrain proportions
coord_fixed() +
# countries outlines
geom_path(data = countries, aes(
x = long,
y = lat,
group = group),
color = "white", size = 0.01
)
plot(p1950)
p1950 <- ggplot() +
# countries
geom_polygon(data = map_data_1950, aes(
fill = Catch,
x = long,
y = lat,
group = group
)
) +
# constrain proportions
coord_map(projection = "mollweide") +
# countries outlines
geom_path(data = countries, aes(
x = long,
y = lat,
group = group),
color = "white", size = 0.01
)
plot(p1950)
rgg <- ggplot() + geom_tile(xyz, aes(x, y))
rgg <- ggplot() + geom_tile(xyz, aes(x = x, y = y, fill = Catch))
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch))
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_fixed()
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_map(projection="mollweide")
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_map()
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_fixed()
plot(rgg)
xyz_tidy <- tidy(xyz)
library(broom)
install.packages("broom")
library(broom)
xyz_tidy <- tidy(xyz)
rgg <- ggplot() + geom_tile(data = xyz_tidy, aes(x = x, y = y, fill = Catch)) + coord_map()
plot(rgg)
View(xyz_tidy)
View(xyz)
rgg <- ggplot() + geom_raster(data = xyz_tidy, aes(x = x, y = y, fill = Catch)) + coord_fixed()
plot(rgg)
rgg <- ggplot() + geom_raster(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_fixed()
plot(rgg)
rgg <- ggplot() + geom_raster(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_map()
plot(rgg)
rgg <- ggplot() + geom_raster(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_map(projection = "mollweide")
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_quickmap()
plot(rgg)
View(xyz)
xyz_shift <- xyz[,x-99]
xyz_shift <- xyz
xyz_shift$x <- x-99
xyz_shift$x <- xyz_shift$x - 99
View(xyz_shift)
rgg <- ggplot() + geom_tile(data = xyz_shift, aes(x = x, y = y, fill = Catch)) + coord_equal()
plot(rgg)
xyz_shift$x <- xyz$x - 95
rgg <- ggplot() + geom_tile(data = xyz_shift, aes(x = x, y = y, fill = Catch)) + coord_equal()
plot(rgg)
xyz_shift$x <- xyz$x + 265
rgg <- ggplot() + geom_tile(data = xyz_shift, aes(x = x, y = y, fill = Catch)) + coord_equal()
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal()
plot(rgg)
xyz$x[df_full$x>90] <- xyz$x[df_full$x>90] - 359 # Shift coordinates manually to center them over the Pacific
xyz$x[xyz$x>90] <- xyz$x[xyz$x>90] - 359 # Shift coordinates manually to center them over the Pacific
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal()
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal() + geom_polygon(data = map_data(world), aes(x=long, y=lat, group=group), fill=NA)
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal() + geom_polygon(data = map_data(world), aes(x=long, y=lat, group=group), fill=NA, color = black)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal() + geom_polygon(data = map_data(world), aes(x=long, y=lat, group=group), fill=NA, color = 000)
plot(rgg)
rgg <- ggplot() + geom_tile(data = xyz, aes(x = x, y = y, fill = Catch)) + coord_equal() + geom_polygon(data = map_data(world), aes(x=long, y=lat, group=group), fill=NA, color = "black")
plot(rgg)
rm(xyz)
rm(xyz_shift)
rm(xyz_tide)
rm(xyz_tidy)
rm(sample)
writeOGR(obj = carto1950, layer="carto1950")
if (!require(rgdal)) {
install.packages("rgdal", repos = "http://cran.stat.sfu.ca/")
require(rgdal)
}
writeOGR(obj = carto1950, layer="carto1950")
writeOGR(obj = carto1950, layer = "carto1950", driver = "ESRI Shapefile")
ogrDrivers()
writeOGR(obj = carto1950, dsn = "carto1950", layer = "carto1950", driver = "ESRI Shapefile")
View(world)
set_wd()
set_wd()
writeOGR(obj = carto1950, dsn = "Shapefiles", layer = "carto1950", driver = "ESRI Shapefile")
world2 <- spTransform(wrld_simpl, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +lon_0=10 +no_defs"))
plot(world2)
world2 <- spTransform(wrld_simpl, CRS("+lon_0=10"))
gg1950 <- tidy(carto1950)
View(gg1950)
View(carto1950)
View(c1950)
p1950 <- ggplot() +
geom_polygon(data = gg1950, aes(
fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
gg1950 <- tidy(carto1950, region="NAME")
View(gg1950)
head(carto1950@data$REGION)
p1950 <- ggplot() +
geom_polygon(data = gg1950, aes(
fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
gg1950 <- tidy(carto1950, region="NAME")
gg1950 <- tidy(carto1950)
gg1950 <- tidy(carto1950, region="ISO3")
p1950 <- ggplot() +
geom_polygon(data = gg1950, aes(
fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
gg1950 <- tidy(carto1950) # This works
p1950 <- ggplot() +
geom_polygon(data = gg1950, aes(
#fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
p1950 <- ggplot() +
geom_polygon(data = subset(gg1950, id == 150), aes(
#fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
p1950 <- ggplot() +
geom_polygon(data = subset(gg1950, id == 151), aes(
#fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
p1950 <- ggplot() +
geom_polygon(data = subset(gg1950, id == 103), aes(
#fill = id,
x = long,
y = lat,
group = group))
plot(p1950)
years <- unique(fishing_data$Year)
View(world)
world2 <- wrld_simpl[wrld_simpl$NAME != "Antarctica",c("ISO3", "NAME", "REGION", "LON", "LAT")]
View(world2)
str(world2)
fishing_years <- list()
for (i in 1:length(years)){
print(i)
dfname <- paste("c", i)
fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
rm(c 1, c 10)
rm(c 1)
rm("c 1","c 10")
View(`c 17`)
rm("c 11", "c 12", "c 13", "c 14", "c 15", "c 16", "c 17", "c 18", "c 19", "c 2", "c 20")
list=ls(pattern="c *")
View(list)
print(list=ls(pattern="c 2*"))
print(ls(pattern="c 2*"))
rm(ls(pattern="c 2*"))
rm(list = ls(pattern="c 2*"))
rm(list)
years <- unique(fishing_data$Year)
fishing_years <- list()
for (i in 1:length(years)){
print(i)
#dfname <- paste("c", i)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in 1:length(years)){
print(year)
#dfname <- paste("c", i)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
print(year)
#dfname <- paste("c", i)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c", i)
print(dfname)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c", year)
print(dfname)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c"year)
print(dfname)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c",year)
print(dfname)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c", year, sep="")
print(dfname)
#fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
for (year in years){
#print(year)
dfname <- paste("c", year, sep="")
#print(dfname)
fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == i,]))
}
View(c1950)
for (year in years){
#print(year)
dfname <- paste("c", year, sep="")
#print(dfname)
fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == year,]))
}
View(c1951)
View(c1959)
geartypes <- unique(c2010$gear_type)
rm(geartypes)
world2 <- wrld_simpl[wrld_simpl$NAME != "Antarctica",c("ISO3", "NAME", "REGION", "LON", "LAT")] # World GIS SpatialPolygonsDataFrame (spdf) from base R, minus Antarctica, minus irrelevant columns (hopefully subregion is actually irrelevant loooool)
for (i in (fishing_years)){
names(i) <- c("NAME", "YEAR", "CATCH")
}
names(fishing_years)
for (i in (fishing_years)){
names(fishing_list[[i]]) <- c("NAME", "YEAR", "CATCH")
}
names(fishing_years[[i]]) <- c("NAME", "YEAR", "CATCH")
names(fishing_years[i]) <- c("NAME", "YEAR", "CATCH")
names(i) <- c("NAME", "YEAR", "CATCH")
names(i)
names(fishing_data) <- c("NAME", "YEAR", "CATCH") # Rename "Country" column to "NAME" so we can merge our catch data with the future spatial data, using the NAME column to link between the two. Capitalizing Year and Catch to make things more consistent once merged.
for (year in years){
#print(year)
dfname <- paste("c", year, sep="") # Create dataframe names in the form: "c<year>"
#print(dfname)
fishing_years[[dfname]] <- assign(paste(dfname), data.frame(fishing_data[fishing_data$Year == year,])) # create and assign these new dataframes the above created dataframe names (dfname), then populate it with rows that contain the correct <year>. THEN, chuck all these dataframes into one fishing_years list. tbh not sure why the dataframes themselves are appearing, need to actually fix that later.
}
map_years <- list()
print(year)
map_years <- list(
for (year in years) {
print(year)
}
)
map_years <- list(
for (year in years) {
#print(year)
dfname <- paste("map",year,sep="")
}
)
